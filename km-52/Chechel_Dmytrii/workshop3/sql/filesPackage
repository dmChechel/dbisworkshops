CREATE OR REPLACE PACKAGE MIGRATION_FILES_PACKAGE AS
  TYPE T_MIGRATION_FILES IS RECORD (
  LINK VARCHAR(255),
  SIZE NUMBER,
  MIGRATION_ID NUMBER,
  TIMESTAMP DATETIME
  );

  TYPE T_MIGRATION_FILES_TABLE IS TABLE OF T_MIGRATION_FILES;

  FUNCTION GET_MIGRATION_FILE(LINK IN MIGRATION_FILES.LINK%TYPE)
    RETURN T_MIGRATION_FILE_TABLE PIPELINED;
  FUNCTION GET_MIGRATION_FILES
    RETURN T_MIGRATION_FILES_TABLE PIPELINED;
    
 PROCEDURE SET_NEW_FILE(LINK     IN MIGRATION_FILES.LINK%TYPE,
                 SIZE    IN MIGRATION_FILES.SIZE%TYPE,
                 MIGRATION_ID IN MIGRATION_FILES.MIGRATION_ID%TYPE
                 );
END;

CREATE OR REPLACE PACKAGE BODY MIGRATION_REQUESTS_PACKAGE AS
  FUNCTION GET_MIGRATION_FILE(LINK IN MIGRATION_FILES.LINK%TYPE)
    RETURN T_MIGRATION_FILE_TABLE PIPELINED AS
    CURSOR MY_CUR IS
      SELECT *
      FROM MIGRATION_FILES
      WHERE MIGRATION_FILES.LINK = LINK;
    BEGIN
      FOR CURR IN MY_CUR
      LOOP
        PIPE ROW (CURR);
      end loop;
    END;

  FUNCTION GET_MIGRATION_FILES
    RETURN T_MIGRATION_FILES_TABLE PIPELINED AS
    CURSOR MY_CURSOR IS
      SELECT *
      FROM MIGRATION_FILES;
    BEGIN
      FOR REC IN MY_CURSOR
      LOOP
        PIPE ROW (REC);
      END LOOP;
    END;
    
 PROCEDURE SET_NEW_FILE(LINK     IN MIGRATION_FILES.LINK%TYPE,
                 SIZE    IN MIGRATION_FILES.SIZE%TYPE,
                 MIGRATION_ID IN MIGRATION_FILES.MIGRATION_ID%TYPE
                 ) AS
    BEGIN
      INSERT INTO MIGRATION_FILES (LINK, SIZE, MIGRATION_ID) VALUES (LINK, SIZE, MIGRATION_ID);
    END;
END SONG_PACKAGE;
  /
select * from table (MIGRATION_FILES_PACKAGE.GET_MIGRATION_FILE(1));
